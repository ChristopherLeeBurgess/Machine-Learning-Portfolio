
class MSet:
    """ Multiset algebra class. This might be useful for statistical inference sometime in the future. """
    def __init__(self, *args):
        self.values = list(args)
        count_add = 0
        count_mult = 0
        for i in args:
            count_add += i
        for i in args:
            count_mult += i
        self.sum = count_add      #self.sum adds all of the values in the multiset.
        self.product = count_mult     #self.product multiplies all of the values in the multiset.
        
    def __add__(self, other):    #Produces the output of indirectly adding two multisets together.
        list_add = []
        for object_one in self.values:
            for object_two in other.values:
                list_add.append(object_one+object_two)
        return MSet(*list_add)
    def __mul__(self, other):    #Produces the output of indirectly multiplying two multisets together.
        list_mul = []
        if type(other) == int:
            for i in self.values:
                list_mul.append(other * i)
            return MSet(*list_mul)
        else:
            for i in self.values:
                for j in other.values:
                    list_mul.append(i*j)
            return MSet(*list_mul)
    def __rmul__(self, other):    #Produces the output of indirectly multiplying two multisets together.
        list_mul = []
        if type(other) == int:
            for i in self.values:
                list_mul.append(other * i)
            return MSet(*list_mul)
        else:
            for i in self.values:
                for j in other.values:
                    list_mul.append(i*j)
            return MSet(*list_mul)
    def __pow__(self, n):
        i = 1
        m = MSet(1)
        while i <= n:
            m *= self 
            i += 1
        return m 
    def __repr__(self):              #Returns an output in the representation of MSet.
        return "MSet({})".format(self.values)
    def dir_sum(self, other):        #Directly sums elements of two multisets together.
        X = []
        for i in range(len(self.values)):
            X.append(self.values[i] + other.values[i])
        return MSet(*X)
    def dir_prod(self, other):      #Directly multiplies elements of two multisets together.
        X = []
        for i in range(len(self.values)):
            X.append(self.values[i] * other.values[i])
        return MSet(*X)
    def __len__(self):  # Returns the length of the multiset.
        return len(list(self.values))
